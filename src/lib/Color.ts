/* Source Article
https://physics.stackexchange.com/questions/94375/what-r-g-b-values-would-represent-a-445nm-monochrome-lightsource-color-on-a-co/94446#94446
*/

import { clamp, interpolate } from "./math";

const CIE1964 = [
    [0.0001299, 0.000003917, 0.0006061], // 360
    [0.0002321, 0.000006965, 0.001086], // 365
    [0.0004149, 0.00001239, 0.001946], // 370
    [0.0007416, 0.00002202, 0.003486], // 375
    [0.001368, 0.000039, 0.006450001], // 380
    [0.002236, 0.000064, 0.01054999], // 385
    [0.004243, 0.00012, 0.02005001], // 390
    [0.00765, 0.000217, 0.03621], // 395
    [0.01431, 0.000396, 0.06785001], // 400
    [0.02319, 0.00064, 0.1102], // 405
    [0.04351, 0.00121, 0.2074], // 410
    [0.07763, 0.00218, 0.3713], // 415
    [0.13438, 0.004, 0.6456], // 420
    [0.21477, 0.0073, 1.0390501], // 425
    [0.2839, 0.0116, 1.3856], // 430
    [0.3285, 0.01684, 1.62296], // 435
    [0.34828, 0.023, 1.74706], // 440
    [0.34806, 0.0298, 1.7826], // 445
    [0.3362, 0.038, 1.77211], // 450
    [0.3187, 0.048, 1.7441], // 455
    [0.2908, 0.06, 1.6692], // 460
    [0.2511, 0.0739, 1.5281], // 465
    [0.19536, 0.09098, 1.28764], // 470
    [0.1421, 0.1126, 1.0419], // 475
    [0.09564, 0.13902, 0.8129501], // 480
    [0.05795001, 0.1693, 0.6162], // 485
    [0.03201, 0.20802, 0.46518], // 490
    [0.0147, 0.2586, 0.3533], // 495
    [0.0049, 0.323, 0.272], // 500
    [0.0024, 0.4073, 0.2123], // 505
    [0.0093, 0.503, 0.1582], // 510
    [0.0291, 0.6082, 0.1117], // 515
    [0.06327, 0.71, 0.07824999], // 520
    [0.1096, 0.7932, 0.05725001], // 525
    [0.1655, 0.862, 0.04216], // 530
    [0.2257499, 0.9148501, 0.02984], // 535
    [0.2904, 0.954, 0.0203], // 540
    [0.3597, 0.9803, 0.0134], // 545
    [0.4334499, 0.9949501, 0.008749999], // 550
    [0.5120501, 1.0, 0.005749999], // 555
    [0.5945, 0.995, 0.0039], // 560
    [0.6784, 0.9786, 0.002749999], // 565
    [0.7621, 0.952, 0.0021], // 570
    [0.8425, 0.9154, 0.0018], // 575
    [0.9163, 0.87, 0.001650001], // 580
    [0.9786, 0.8163, 0.0014], // 585
    [1.0263, 0.757, 0.0011], // 590
    [1.0567, 0.6949, 0.001], // 595
    [1.0622, 0.631, 0.0008], // 600
    [1.0456, 0.5668, 0.0006], // 605
    [1.0026, 0.503, 0.00034], // 610
    [0.9384, 0.4412, 0.00024], // 615
    [0.8544499, 0.381, 0.00019], // 620
    [0.7514, 0.321, 0.0001], // 625
    [0.6424, 0.265, 0.00004999999], // 630
    [0.5419, 0.217, 0.00003], // 635
    [0.4479, 0.175, 0.00002], // 640
    [0.3608, 0.1382, 0.00001], // 645
    [0.2835, 0.107, 0.0], // 650
    [0.2187, 0.0816, 0.0], // 655
    [0.1649, 0.061, 0.0], // 660
    [0.1212, 0.04458, 0.0], // 665
    [0.0874, 0.032, 0.0], // 670
    [0.0636, 0.0232, 0.0], // 675
    [0.04677, 0.017, 0.0], // 680
    [0.0329, 0.01192, 0.0], // 685
    [0.0227, 0.00821, 0.0], // 690
    [0.01584, 0.005723, 0.0], // 695
    [0.01135916, 0.004102, 0.0], // 700
    [0.008110916, 0.002929, 0.0], // 705
    [0.005790346, 0.002091, 0.0], // 710
    [0.004109457, 0.001484, 0.0], // 715
    [0.002899327, 0.001047, 0.0], // 720
    [0.00204919, 0.00074, 0.0], // 725
    [0.001439971, 0.00052, 0.0], // 730
    [0.0009999493, 0.0003611, 0.0], // 735
    [0.0006900786, 0.0002492, 0.0], // 740
    [0.0004760213, 0.0001719, 0.0], // 745
    [0.0003323011, 0.00012, 0.0], // 750
    [0.0002348261, 0.0000848, 0.0], // 755
    [0.0001661505, 0.00006, 0.0], // 760
    [0.000117413, 0.0000424, 0.0], // 765
    [0.00008307527, 0.00003, 0.0], // 770
    [0.00005870652, 0.0000212, 0.0], // 775
    [0.00004150994, 0.00001499, 0.0], // 780
    [0.00002935326, 0.0000106, 0.0], // 785
    [0.00002067383, 0.0000074657, 0.0], // 790
    [0.00001455977, 0.0000052578, 0.0], // 795
    [0.00001025398, 0.0000037029, 0.0], // 800
    [0.000007221456, 0.0000026078, 0.0], // 805
    [0.000005085868, 0.0000018366, 0.0], // 810
    [0.000003581652, 0.0000012934, 0.0], // 815
    [0.000002522525, 0.00000091093, 0.0], // 820
    [0.000001776509, 0.00000064153, 0.0], // 825
    [0.000001251141, 0.00000045181, 0.0], // 830
];

interface RGB {
    r: number;
    g: number;
    b: number;
}

export default class Color {
    static wavelengthToRGB(lambda: number): RGB {
        if (lambda < 380 || lambda > 830) return { r: 0, g: 0, b: 0 };

        const index = Math.floor((lambda - 360) / 5);

        const X = interpolate(lambda, 360 + index * 5, 360 + (index + 1) * 5, CIE1964[index][0], CIE1964[index + 1][0]);
        const Y = interpolate(lambda, 360 + index * 5, 360 + (index + 1) * 5, CIE1964[index][1], CIE1964[index + 1][1]);
        const Z = interpolate(lambda, 360 + index * 5, 360 + (index + 1) * 5, CIE1964[index][2], CIE1964[index + 1][2]);

        const sum = X + Y + Z;

        const x = X / sum;
        const y = Y / sum;
        const z = Z / sum;

        /*
    		The matix values in the next step depend on location of RGB in the XYZ color space.
    		These constants are for
            Observer:          2Â°
            Illuminant:        D65
            RGB Working Space: sRGB
		*/

        let r = X * 3.2404542 + Y * -1.5371385 + Z * -0.4985314;
        let g = X * -0.969266 + Y * 1.8760108 + Z * 0.041556;
        let b = X * 0.0556434 + Y * -0.2040259 + Z * 1.0572252;

        r = Math.floor(clamp(r * 255, 0, 255));
        g = Math.floor(clamp(g * 255, 0, 255));
        b = Math.floor(clamp(b * 255, 0, 255));

        return { r, g, b };
    }

    static wavelengthToHex(lambda: number) {
        return Color.rgbToHex(Color.wavelengthToRGB(lambda));
    }

    static rgbToHex(color: RGB): string {
        return "#" + ((1 << 24) | (color.r << 16) | (color.g << 8) | color.b).toString(16).slice(1);
    }
}
